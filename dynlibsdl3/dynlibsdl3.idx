nimTitle	dynlibsdl3	dynlibsdl3.html	module dynlibsdl3		0
nim	sdl3_init	#sdl3_init	proc sdl3_init(flags = INIT_VIDEO): bool		75
nim	sdl3_init_sub_system	#sdl3_init_sub_system,InitFlags	proc sdl3_init_sub_system(flags: InitFlags): bool		84
nim	sdl3_quit_subsystem	#sdl3_quit_subsystem,InitFlags	proc sdl3_quit_subsystem(flags: InitFlags)		89
nim	sdl3_quit	#sdl3_quit	proc sdl3_quit()		95
nim	was_init	#was_init	proc was_init(flags = INIT_NONE): InitFlags		101
nim	sd3_avail	#sd3_avail	proc sd3_avail(flags = INIT_VIDEO): bool		107
nim	create_audio_stream	#create_audio_stream,AudioSpec,AudioSpec	proc create_audio_stream(src_spec, dst_spec: AudioSpec): AudioStreamPtr		126
nim	destroy	#destroy,AudioStreamPtr	proc destroy(stream: AudioStreamPtr)		137
nim	flush	#flush,AudioStreamPtr	proc flush(stream: AudioStreamPtr): bool		143
nim	get_audio_device_name	#get_audio_device_name,AudioDeviceID	proc get_audio_device_name(devid: AudioDeviceID): string		154
nim	get_audio_driver	#get_audio_driver,int	proc get_audio_driver(index: int): string		162
nim	get_audio_output_devices	#get_audio_output_devices	proc get_audio_output_devices(): seq[AudioDeviceID]		172
nim	get_audio_stream_available	#get_audio_stream_available,AudioStreamPtr	proc get_audio_stream_available(stream: AudioStreamPtr): bool		188
nim	get_audio_stream_device	#get_audio_stream_device,AudioStreamPtr	proc get_audio_stream_device(stream: AudioStreamPtr): AudioDeviceID		197
nim	get_current_audio_driver	#get_current_audio_driver	proc get_current_audio_driver(): string		210
nim	get_num_audio_drivers	#get_num_audio_drivers	proc get_num_audio_drivers(): int		216
nim	open_audio_device_stream	#open_audio_device_stream,AudioDeviceID,AudioSpec,AudioStreamCallback,pointer	proc open_audio_device_stream(devid: AudioDeviceID; spec: AudioSpec;\n                         callback: AudioStreamCallback; userdata: pointer = nil): AudioStreamPtr		235
nim	pause_audio_device	#pause_audio_device,AudioDeviceID	proc pause_audio_device(dev: AudioDeviceID): bool		252
nim	put_audio_stream_data	#put_audio_stream_data,AudioStreamPtr,pointer,int	proc put_audio_stream_data(stream: AudioStreamPtr; buf: pointer; buflen: int): bool		259
nim	resume_audio_device	#resume_audio_device,AudioDeviceID	proc resume_audio_device(dev: AudioDeviceID): bool		268
nim	compose_custom_blend_mode	#compose_custom_blend_mode,BlendFactor,BlendFactor,BlendOperation,BlendFactor,BlendFactor,BlendOperation	proc compose_custom_blend_mode(src_color_factor: BlendFactor;\n                          dst_color_factor: BlendFactor;\n                          color_operation: BlendOperation;\n                          src_alpha_factor: BlendFactor;\n                          dst_alpha_factor: BlendFactor;\n                          alpha_operation: BlendOperation): BlendMode		293
nim	clear_clipboard_data	#clear_clipboard_data	proc clear_clipboard_data(): bool		320
nim	get_clipboard_data	#get_clipboard_data,string	proc get_clipboard_data(mime_type: string): seq[byte]		327
nim	has_clipboard_data	#has_clipboard_data,string	proc has_clipboard_data(mime_type: string): bool		343
nim	clear_error	#clear_error	proc clear_error()		364
nim	get_error	#get_error	proc get_error(): string		372
nim	peep_events	#peep_events,openArray[Event],int,EventAction,EventType,EventType	proc peep_events(events: var openArray[Event]; numevents: int; action: EventAction;\n            min_type, max_type: EventType): int		411
nim	peep_events	#peep_events,openArray[Event],EventAction,EventType,EventType	proc peep_events(events: var openArray[Event]; action: EventAction;\n            min_type, max_type: EventType): int		425
nim	poll_event	#poll_event	proc poll_event(): bool		429
nim	poll	#poll,Event	proc poll(event: var Event): bool		435
nim	pump_events	#pump_events	proc pump_events()		441
nim	push	#push,Event	proc push(event: var Event): bool		447
nim	set_event_enabled	#set_event_enabled,EventType,bool	proc set_event_enabled(typ: EventType; state: bool)		455
nim	wait	#wait	proc wait(): bool		465
nim	wait	#wait,Event	proc wait(event: var Event): bool		471
nim	wait_timeout	#wait_timeout,int32	proc wait_timeout(timeout: int32): bool		477
nim	wait_timeout	#wait_timeout,Event,int32	proc wait_timeout(event: var Event; timeout: int32): bool		483
nim	get_hint	#get_hint,HintName	proc get_hint(name: HintName): string		521
nim	set_hint	#set_hint,HintName,string	proc set_hint(name: HintName; value: string): bool		531
nim	update_joysticks	#update_joysticks	proc update_joysticks()		556
nim	log_message	#log_message,LogCategory,LogPriority,string	proc log_message(category: LogCategory; priority: LogPriority; message: string)		632
nim	log	#log,string	proc log(message: string)		635
nim	log_critical	#log_critical,LogCategory,string	proc log_critical(category: LogCategory; message: string)		641
nim	log_debug	#log_debug,LogCategory,string	proc log_debug(category: LogCategory; message: string)		647
nim	log_error	#log_error,LogCategory,string	proc log_error(category: LogCategory; message: string)		653
nim	log_info	#log_info,LogCategory,string	proc log_info(category: LogCategory; message: string)		663
nim	log_set_output_function	#log_set_output_function,LogOutputFunction,pointer	proc log_set_output_function(callback: LogOutputFunction; userdata: pointer = nil)		682
nim	log_set_priority	#log_set_priority,LogCategory,LogPriority	proc log_set_priority(category: LogCategory; priority: LogPriority)		690
nim	log_verbose	#log_verbose,LogCategory,string	proc log_verbose(category: LogCategory; message: string)		697
nim	log_warn	#log_warn,LogCategory,string	proc log_warn(category: LogCategory; message: string)		703
nim	show_message_box	#show_message_box,MessageBoxData,int	proc show_message_box(messageboxdata: var MessageBoxData; buttonid: var int): bool		733
nim	show_simple_message_box	#show_simple_message_box,MessageBoxFlags,string,string,WindowPtr	proc show_simple_message_box(flags: MessageBoxFlags; title: string; message: string;\n                        window: WindowPtr = nil): bool		744
nim	capture_mouse	#capture_mouse,bool	proc capture_mouse(enabled: bool): bool		760
nim	create_color_cursor	#create_color_cursor,SurfacePtr,int,int	proc create_color_cursor(surface: SurfacePtr; hot_x, hot_y: int): CursorPtr		767
nim	create_cursor	#create_cursor,openArray[byte],openArray[byte],int,int,int,int	proc create_cursor(data, mask: openArray[byte]; w, h: int; hot_x, hot_y: int): CursorPtr		775
nim	create_system_cursor	#create_system_cursor,SystemCursor	proc create_system_cursor(id: SystemCursor): CursorPtr		790
nim	cursor_visible	#cursor_visible	proc cursor_visible(): bool		799
nim	destroy	#destroy,CursorPtr	proc destroy(cursor: CursorPtr)		805
nim	get_cursor	#get_cursor	proc get_cursor(): CursorPtr		811
nim	get_global_mouse_state	#get_global_mouse_state	proc get_global_mouse_state(): tuple[x, y: float, state: uint32]		819
nim	get_mouse_focus	#get_mouse_focus	proc get_mouse_focus(): WindowPtr		827
nim	get_mouse_state	#get_mouse_state	proc get_mouse_state(): tuple[x, y: float, state: uint32]		833
nim	get_relative_mouse_mode	#get_relative_mouse_mode	proc get_relative_mouse_mode(): bool		841
nim	hide_cursor	#hide_cursor	proc hide_cursor(): bool		849
nim	set_cursor	#set_cursor,CursorPtr	proc set_cursor(cursor: CursorPtr): bool		857
nim	set_relative_mouse_mode	#set_relative_mouse_mode,bool	proc set_relative_mouse_mode(enabled: bool): bool		864
nim	show_cursor	#show_cursor	proc show_cursor(): bool		873
nim	map_rgb	#map_rgb,PixelFormat,byte,byte,byte	proc map_rgb(format: PixelFormat; r, g, b: byte): uint32		926
nim	map_rgba	#map_rgba,PixelFormat,byte,byte,byte,byte	proc map_rgba(format: PixelFormat; r, g, b, a: byte): uint32		935
nim	create_renderer	#create_renderer,WindowPtr,string	proc create_renderer(window: WindowPtr; name: string; flags = RendererFlags 0): RendererPtr		1003
nim	create_renderer	#create_renderer,WindowPtr	proc create_renderer(window: WindowPtr; flags = RendererFlags 0): RendererPtr		1012
nim	create_texture	#create_texture,RendererPtr,PixelFormatEnum,TextureAccess,int,int	proc create_texture(renderer: RendererPtr; format: PixelFormatEnum;\n               access: TextureAccess; width, height: int): TexturePtr		1025
nim	create_texture_from_surface	#create_texture_from_surface,RendererPtr,SurfacePtr	proc create_texture_from_surface(renderer: RendererPtr; surface: SurfacePtr): TexturePtr		1035
nim	create_window_and_renderer	#create_window_and_renderer,int,int,WindowFlags	proc create_window_and_renderer(width, height: int;\n                           window_flags: WindowFlags = WindowFlags 0): tuple[\n    window: WindowPtr, renderer: RendererPtr]		1046
nim	destroy	#destroy,RendererPtr	proc destroy(renderer: RendererPtr)		1068
nim	destroy	#destroy,TexturePtr	proc destroy(texture: TexturePtr)		1076
nim	get_renderer	#get_renderer,WindowPtr	proc get_renderer(window: WindowPtr): RendererPtr		1106
nim	query_texture	#query_texture,TexturePtr,uint32,int,int,int	proc query_texture(texture: TexturePtr; format: var uint32; access: var int;\n              w, h: var int): bool		1125
nim	clear	#clear,RendererPtr	proc clear(renderer: RendererPtr): bool		1141
nim	coordinates_from_window	#coordinates_from_window,RendererPtr,float,float,float,float	proc coordinates_from_window(renderer: RendererPtr; window_x, window_y: float;\n                        x, y: var float): bool		1150
nim	fill_rect	#fill_rect,RendererPtr	proc fill_rect(renderer: RendererPtr): bool		1169
nim	fill_rect	#fill_rect,RendererPtr,FRect	proc fill_rect(renderer: RendererPtr; rect: FRect): bool		1176
nim	fill_rect	#fill_rect,RendererPtr,float,float,float,float	proc fill_rect(renderer: RendererPtr; x, y: float; w, h: float): bool		1185
nim	render_geometry	#render_geometry,RendererPtr,TexturePtr,openArray[Vertex]	proc render_geometry(renderer: RendererPtr; texture: TexturePtr;\n                vertices: openArray[Vertex]): bool		1196
nim	render_geometry	#render_geometry,RendererPtr,openArray[Vertex]	proc render_geometry(renderer: RendererPtr; vertices: openArray[Vertex]): bool		1207
nim	render_geometry	#render_geometry,RendererPtr,TexturePtr,openArray[Vertex],openArray[cint]	proc render_geometry(renderer: RendererPtr; texture: TexturePtr;\n                vertices: openArray[Vertex]; indices: openArray[cint]): bool		1216
nim	render_geometry	#render_geometry,RendererPtr,openArray[Vertex],openArray[cint]	proc render_geometry(renderer: RendererPtr; vertices: openArray[Vertex];\n                indices: openArray[cint]): bool		1229
nim	render_line	#render_line,RendererPtr,float,float,float,float	proc render_line(renderer: RendererPtr; x1, y1: float; x2, y2: float): bool		1243
nim	render_point	#render_point,RendererPtr,float,float	proc render_point(renderer: RendererPtr; x, y: float): bool		1254
nim	render_point	#render_point,RendererPtr,int,int	proc render_point(renderer: RendererPtr; x, y: int): bool		1261
nim	present	#present,RendererPtr	proc present(renderer: RendererPtr)		1267
nim	render_rect	#render_rect,RendererPtr,FRect	proc render_rect(renderer: RendererPtr; rect: FRect): bool		1276
nim	render_rect	#render_rect,RendererPtr,float,float,float,float	proc render_rect(renderer: RendererPtr; x, y: float; w, h: float): bool		1285
nim	render_texture	#render_texture,RendererPtr,TexturePtr	proc render_texture(renderer: RendererPtr; texture: TexturePtr): bool		1295
nim	render_texture	#render_texture,RendererPtr,TexturePtr,FRect	proc render_texture(renderer: RendererPtr; texture: TexturePtr; dst: FRect): bool		1303
nim	render_texture	#render_texture,RendererPtr,TexturePtr,int,int,int,int	proc render_texture(renderer: RendererPtr; texture: TexturePtr; x, y, w, h: int): bool		1315
nim	render_texture	#render_texture,RendererPtr,TexturePtr,FRect,FRect	proc render_texture(renderer: RendererPtr; texture: TexturePtr;\n               srcrect, dstrect: FRect): bool		1325
nim	render_texture_rotated	#render_texture_rotated,RendererPtr,TexturePtr,FRect,FRect,float,FPoint,RendererFlip	proc render_texture_rotated(renderer: RendererPtr; texture: TexturePtr;\n                       srcrect, dstrect: FRect; angle: float; center: FPoint;\n                       flip: RendererFlip): bool		1337
nim	clip_rect	#clip_rect,RendererPtr,Rect	proc clip_rect(renderer: RendererPtr; rect: Rect): bool		1358
nim	set_draw_blend_mode	#set_draw_blend_mode,RendererPtr,BlendMode	proc set_draw_blend_mode(renderer: RendererPtr; blend_mode: BlendMode): bool		1367
nim	set_draw_color	#set_draw_color,RendererPtr,byte,byte,byte,byte	proc set_draw_color(renderer: RendererPtr; r, g, b: byte; a: byte = 0x000000FF): bool		1375
nim	set_scale	#set_scale,RendererPtr,float,float	proc set_scale(renderer: RendererPtr; scale_x, scale_y: float): bool		1389
nim	set_target	#set_target,RendererPtr,TexturePtr	proc set_target(renderer: RendererPtr; texture: TexturePtr = nil): bool		1397
nim	set_vsync	#set_vsync,RendererPtr,bool	proc set_vsync(renderer: RendererPtr; vsync: bool): bool		1404
nim	set_alpha_mod	#set_alpha_mod,TexturePtr,byte	proc set_alpha_mod(texture: TexturePtr; alpha: byte): bool		1413
nim	set_blend_mode	#set_blend_mode,TexturePtr,BlendMode	proc set_blend_mode(texture: TexturePtr; blend_mode: BlendMode): bool		1420
nim	set_color_mod	#set_color_mod,TexturePtr,byte,byte,byte	proc set_color_mod(texture: TexturePtr; r, g, b: byte): bool		1428
nim	set_scale_mode	#set_scale_mode,TexturePtr,ScaleMode	proc set_scale_mode(texture: TexturePtr; scale_mode: ScaleMode): bool		1436
nim	update	#update,TexturePtr,Rect,pointer,int	proc update(texture: TexturePtr; rect: var Rect; pixels: pointer; pitch: int): bool		1447
nim	update	#update,TexturePtr,pointer,int	proc update(texture: TexturePtr; pixels: pointer; pitch: int): bool		1456
nim	create_surface_from	#create_surface_from,pointer,int,int,int,uint32	proc create_surface_from(pixels: pointer; width, height: int; pitch: int;\n                    format: uint32): SurfacePtr		1525
nim	destroy	#destroy,SurfacePtr	proc destroy(surface: SurfacePtr)		1535
nim	load_bmp	#load_bmp,string	proc load_bmp(file: string): SurfacePtr		1554
nim	save_bmp	#save_bmp,SurfacePtr,string	proc save_bmp(surface: SurfacePtr; file: string): bool		1584
nim	set_color_key	#set_color_key,SurfacePtr,bool,uint32	proc set_color_key(surface: SurfacePtr; flag: bool; key: uint32): bool		1596
nim	add_timer	#add_timer,uint32,TimerCallback,pointer	proc add_timer(interval: uint32; callback: TimerCallback; param: pointer = nil): TimerID		1625
nim	delay	#delay,uint32	proc delay(ms: uint32)		1635
nim	delay_ns	#delay_ns,uint64	proc delay_ns(ns: uint64)		1640
nim	get_performance_counter	#get_performance_counter	proc get_performance_counter(): uint64		1645
nim	get_performance_frequency	#get_performance_frequency	proc get_performance_frequency(): uint64		1651
nim	get_ticks	#get_ticks	proc get_ticks(): uint64		1657
nim	get_ticks_ns	#get_ticks_ns	proc get_ticks_ns(): uint64		1665
nim	remove_timer	#remove_timer,TimerID	proc remove_timer(id: TimerID): bool		1671
nim	get_revision	#get_revision	proc get_revision(): string		1688
nim	get_version	#get_version	proc get_version(): tuple[major, minor, patch: int]		1694
nim	create_popup_window	#create_popup_window,WindowPtr,int,int,int,int,uint32	proc create_popup_window(parent: WindowPtr; offset_x, offset_y: int; w, h: int;\n                    flags: uint32): WindowPtr		1706
nim	create_window	#create_window,string,int,int	proc create_window(title: string; w, h: int; flags = WindowFlags 0): WindowPtr		1719
nim	destroy	#destroy,WindowPtr	proc destroy(window: WindowPtr)		1732
nim	disable_screen_saver	#disable_screen_saver	proc disable_screen_saver(): bool		1742
nim	enable_screen_saver	#enable_screen_saver	proc enable_screen_saver(): bool		1758
nim	flash	#flash,WindowPtr,FlashOperation	proc flash(window: WindowPtr; operation: FlashOperation): bool		1767
nim	get_closest_fullscreen_display_mode	#get_closest_fullscreen_display_mode,DisplayID,int,int,float,bool	proc get_closest_fullscreen_display_mode(display_id: DisplayID; w, h: int;\n                                    refresh_rate: float;\n                                    include_high_density_modes: bool): ptr DisplayMode		1793
nim	get_current_display_mode	#get_current_display_mode,DisplayID	proc get_current_display_mode(display_id: DisplayID): ptr DisplayMode		1809
nim	get_current_video_driver	#get_current_video_driver	proc get_current_video_driver(): string		1820
nim	get_display_bounds	#get_display_bounds,DisplayID,Rect	proc get_display_bounds(display_id: DisplayID; rect: var Rect): bool		1833
nim	get_display_bounds	#get_display_bounds,DisplayID,int,int,int,int	proc get_display_bounds(display_id: DisplayID; x, y: var int; width, height: var int): bool		1842
nim	get_display_content_scale	#get_display_content_scale,DisplayID	proc get_display_content_scale(display_id: DisplayID): float		1858
nim	get_display_for_window	#get_display_for_window,WindowPtr	proc get_display_for_window(window: WindowPtr): DisplayID		1870
nim	get_display_name	#get_display_name,DisplayID	proc get_display_name(display_id: DisplayID): string		1880
nim	get_displays	#get_displays	proc get_displays(): seq[DisplayID]		1905
nim	get_display_usable_bounds	#get_display_usable_bounds,DisplayID,Rect	proc get_display_usable_bounds(display_id: DisplayID; rect: var Rect): bool		1924
nim	get_display_usable_bounds	#get_display_usable_bounds,DisplayID,int,int	proc get_display_usable_bounds(display_id: DisplayID; width, height: var int): bool		1935
nim	get_fullscreen_display_modes	#get_fullscreen_display_modes,DisplayID	proc get_fullscreen_display_modes(display_id: DisplayID): seq[DisplayMode]		1967
nim	get_grabbed_window	#get_grabbed_window	proc get_grabbed_window(): WindowPtr		1986
nim	get_num_video_drivers	#get_num_video_drivers	proc get_num_video_drivers(): int		1996
nim	get_primary_display	#get_primary_display	proc get_primary_display(): DisplayID		2005
nim	get_flags	#get_flags,WindowPtr	proc get_flags(window: WindowPtr): WindowFlags		2021
nim	get_window_from_id	#get_window_from_id	proc get_window_from_id(id: WindowID or uint32): WindowPtr		2031
nim	get_fullscreen_mode	#get_fullscreen_mode,WindowPtr	proc get_fullscreen_mode(window: WindowPtr = nil): ptr DisplayMode		2039
nim	get_grab	#get_grab,WindowPtr	proc get_grab(window: WindowPtr): bool		2048
nim	get_id	#get_id,WindowPtr	proc get_id(window: WindowPtr): WindowID		2058
nim	get_keyboard_grab	#get_keyboard_grab,WindowPtr	proc get_keyboard_grab(window: WindowPtr): bool		2067
nim	get_maximum_size	#get_maximum_size,WindowPtr,int,int	proc get_maximum_size(window: WindowPtr; w, h: var int): bool		2075
nim	get_minimum_size	#get_minimum_size,WindowPtr,int,int	proc get_minimum_size(window: WindowPtr; w, h: var int): bool		2087
nim	get_mouse_grab	#get_mouse_grab,WindowPtr	proc get_mouse_grab(window: WindowPtr): bool		2099
nim	get_pixel_format	#get_pixel_format,WindowPtr	proc get_pixel_format(window: WindowPtr): PixelFormatEnum		2112
nim	get_position	#get_position,WindowPtr,int,int	proc get_position(window: WindowPtr; x, y: var int): bool		2122
nim	get_size	#get_size,WindowPtr,int,int	proc get_size(window: WindowPtr; w, h: var int): bool		2138
nim	hide	#hide,WindowPtr	proc hide(window: WindowPtr): bool		2157
nim	`raise`	#raise,WindowPtr	proc `raise`(window: WindowPtr): bool		2169
nim	screen_saver_enabled	#screen_saver_enabled	proc screen_saver_enabled(): bool		2180
nim	set_bordered	#set_bordered,WindowPtr,bool	proc set_bordered(window: WindowPtr; bordered: bool): bool		2190
nim	set_fullscreen	#set_fullscreen,WindowPtr,bool	proc set_fullscreen(window: WindowPtr; fullscreen: bool): bool		2201
nim	set_fullscreen_mode	#set_fullscreen_mode,WindowPtr,ptr.DisplayMode	proc set_fullscreen_mode(window: WindowPtr; mode: ptr DisplayMode): bool		2210
nim	set_grab	#set_grab,WindowPtr,bool	proc set_grab(window: WindowPtr; grabbed: bool): bool		2220
nim	set_icon	#set_icon,WindowPtr,SurfacePtr	proc set_icon(window: WindowPtr; surface: SurfacePtr): bool		2232
nim	set_keyboard_grab	#set_keyboard_grab,WindowPtr,bool	proc set_keyboard_grab(window: WindowPtr; grabbed: bool): bool		2243
nim	set_maximum_size	#set_maximum_size,WindowPtr,int,int	proc set_maximum_size(window: WindowPtr; min_w, min_h: int): bool		2252
nim	set_minimum_size	#set_minimum_size,WindowPtr,int,int	proc set_minimum_size(window: WindowPtr; min_w, min_h: int): bool		2261
nim	set_mouse_grab	#set_mouse_grab,WindowPtr,bool	proc set_mouse_grab(window: WindowPtr; grabbed: bool): bool		2272
nim	set_position	#set_position,WindowPtr,int,int	proc set_position(window: WindowPtr; x, y: int): bool		2284
nim	set_resizable	#set_resizable,WindowPtr,bool	proc set_resizable(window: WindowPtr; ontop: bool): bool		2298
nim	set_size	#set_size,WindowPtr,int,int	proc set_size(window: WindowPtr; x, y: int): bool		2307
nim	set_title	#set_title,WindowPtr,string	proc set_title(window: WindowPtr; title: string): bool		2316
nim	show	#show,WindowPtr	proc show(window: WindowPtr): bool		2325
nim	update_surface	#update_surface,WindowPtr	proc update_surface(window: WindowPtr): bool		2336
nim	quit_requested	#quit_requested	proc quit_requested(): bool		2371
nim	copy	#copy,RendererPtr,TexturePtr	proc copy(renderer: RendererPtr; texture: TexturePtr): bool		2402
nim	copy	#copy,RendererPtr,TexturePtr,FRect	proc copy(renderer: RendererPtr; texture: TexturePtr; dst: FRect): bool		2408
nim	copy	#copy,RendererPtr,TexturePtr,FRect,FRect	proc copy(renderer: RendererPtr; texture: TexturePtr; src, dst: FRect): bool		2414
nim	create_rgb_surface_from	#create_rgb_surface_from,pointer,int,int,int,int,uint32,uint32,uint32,uint32	proc create_rgb_surface_from(pixels: pointer; width, height, depth, pitch: int;\n                        rmask, gmask, bmask, amask: uint32): SurfacePtr		2424
nim	free	#free,SurfacePtr	proc free(surface: SurfacePtr)		2432
nimgrp	createrenderer	#create_renderer-procs-all	proc		1003
nimgrp	getdisplaybounds	#get_display_bounds-procs-all	proc		1833
nimgrp	peepevents	#peep_events-procs-all	proc		411
nimgrp	update	#update-procs-all	proc		1447
nimgrp	rendertexture	#render_texture-procs-all	proc		1295
nimgrp	destroy	#destroy-procs-all	proc		137
nimgrp	rendergeometry	#render_geometry-procs-all	proc		1196
nimgrp	getdisplayusablebounds	#get_display_usable_bounds-procs-all	proc		1924
nimgrp	waittimeout	#wait_timeout-procs-all	proc		477
nimgrp	renderrect	#render_rect-procs-all	proc		1276
nimgrp	wait	#wait-procs-all	proc		465
nimgrp	renderpoint	#render_point-procs-all	proc		1254
nimgrp	fillrect	#fill_rect-procs-all	proc		1169
nimgrp	copy	#copy-procs-all	proc		2402
