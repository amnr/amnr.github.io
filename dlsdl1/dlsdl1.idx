nimTitle	dlsdl1	dlsdl1.html	module src/dlsdl1		0
nim	sdl1_free	dlsdl1.html#sdl1_free,pointer	proc sdl1_free(mem: pointer)		43
nim	sdl1_init	dlsdl1.html#sdl1_init	proc sdl1_init(flags = INIT_VIDEO): bool		49
nim	sdl1_quit	dlsdl1.html#sdl1_quit	proc sdl1_quit()		58
nim	sdl1_avail	dlsdl1.html#sdl1_avail	proc sdl1_avail(flags = INIT_VIDEO): bool		64
nim	audio_driver_name	dlsdl1.html#audio_driver_name	proc audio_driver_name(): string		73
nim	build_audio_cvt	dlsdl1.html#build_audio_cvt,ptr.AudioCVT,uint16,byte,int,uint16,byte,int	proc build_audio_cvt(cvt: ptr AudioCVT; src_format: uint16; src_channels: byte;\n                src_rate: int; dst_format: uint16; dst_channels: byte;\n                dst_rate: int): bool		87
nim	close_audio	dlsdl1.html#close_audio	proc close_audio()		100
nim	convert_audio	dlsdl1.html#convert_audio,AudioCVT	proc convert_audio(cvt: var AudioCVT): bool		106
nim	free_wav	dlsdl1.html#free_wav,ptr.UncheckedArray[byte]	proc free_wav(audio_buf: ptr UncheckedArray[byte])		113
nim	get_audio_status	dlsdl1.html#get_audio_status	proc get_audio_status(): AudioStatus		119
nim	load_wav_rw	dlsdl1.html#load_wav_rw,RWopsPtr,bool,AudioSpec,ptr.UncheckedArray[byte],uint32	proc load_wav_rw(src: RWopsPtr; freesrc: bool; spec: var AudioSpec;\n            audio_buf: var ptr UncheckedArray[byte]; audio_len: var uint32): ptr AudioSpec		125
nim	lock_audio	dlsdl1.html#lock_audio	proc lock_audio()		153
nim	mix_audio	dlsdl1.html#mix_audio,ptr.UncheckedArray[byte],,uint32,int	proc mix_audio(dst: ptr UncheckedArray[byte];\n          src: ptr byte or ptr UncheckedArray[byte]; len: uint32; volume: int)		159
nim	open_audio	dlsdl1.html#open_audio,AudioSpec	proc open_audio(desired: var AudioSpec): bool		167
nim	open_audio	dlsdl1.html#open_audio,AudioSpec,AudioSpec	proc open_audio(desired, obtained: var AudioSpec): bool		174
nim	pause_audio	dlsdl1.html#pause_audio,bool	proc pause_audio(pause_on: bool)		181
nim	unlock_audio	dlsdl1.html#unlock_audio	proc unlock_audio()		187
nim	clear_error	dlsdl1.html#clear_error	proc clear_error()		197
nim	get_error	dlsdl1.html#get_error	proc get_error(): string		205
nim	set_error	dlsdl1.html#set_error,string	proc set_error(msg: string): bool		214
nim	event_state	dlsdl1.html#event_state,EventType,bool	proc event_state(typ: EventType; state: bool): bool		224
nim	peep_events	dlsdl1.html#peep_events,openArray[Event],int,EventAction,EventMask	proc peep_events(events: var openArray[Event]; numevents: int; action: EventAction;\n            mask: EventMask): int		237
nim	peep_events	dlsdl1.html#peep_events,openArray[Event],EventAction,EventMask	proc peep_events(events: var openArray[Event]; action: EventAction; mask: EventMask): int		248
nim	poll_event	dlsdl1.html#poll_event	proc poll_event(): bool		252
nim	poll	dlsdl1.html#poll,Event	proc poll(event: var Event): bool		258
nim	pump_events	dlsdl1.html#pump_events	proc pump_events()		264
nim	push	dlsdl1.html#push,Event	proc push(event: Event): bool		270
nim	set_event_filter	dlsdl1.html#set_event_filter,EventFilter	proc set_event_filter(filter: EventFilter)		280
nim	wait	dlsdl1.html#wait,Event	proc wait(event: var Event): bool		286
nim	get_key_name	dlsdl1.html#get_key_name,Key	proc get_key_name(key: Key): string		320
nim	get_mod_state	dlsdl1.html#get_mod_state	proc get_mod_state(): Mod		329
nim	get_mouse_state	dlsdl1.html#get_mouse_state	proc get_mouse_state(): tuple[x, y: int, buttons: MouseButton]		354
nim	get_relative_mouse_state	dlsdl1.html#get_relative_mouse_state	proc get_relative_mouse_state(): tuple[x, y: int, buttons: MouseButton]		362
nim	show_cursor	dlsdl1.html#show_cursor,bool	proc show_cursor(toggle: bool): bool		372
nim	warp_mouse	dlsdl1.html#warp_mouse,uint16,uint16	proc warp_mouse(x, y: uint16)		384
nim	rw_from_file	dlsdl1.html#rw_from_file,string,string	proc rw_from_file(file, mode: string): RWopsPtr		396
nim	add_timer	dlsdl1.html#add_timer,uint32,NewTimerCallback,pointer	proc add_timer(interval: uint32; callback: NewTimerCallback; param: pointer = nil): TimerID		413
nim	delay	dlsdl1.html#delay,uint32	proc delay(ms: uint32)		422
nim	get_ticks	dlsdl1.html#get_ticks	proc get_ticks(): uint32		428
nim	remove_timer	dlsdl1.html#remove_timer,TimerID	proc remove_timer(t: TimerID): bool		439
nim	set_timer	dlsdl1.html#set_timer,uint32,TimerCallback	proc set_timer(interval: uint32; callback: TimerCallback): bool		446
nim	linked_version	dlsdl1.html#linked_version	proc linked_version(): tuple[major, minor, patch: int]		457
nim	create_rgb_surface	dlsdl1.html#create_rgb_surface,SurfaceFlags,int,int,int,uint32,uint32,uint32,uint32	proc create_rgb_surface(flags: SurfaceFlags; width, height, depth: int;\n                   rmask, gmask, bmask, amask: uint32): SurfacePtr		471
nim	create_rgb_surface	dlsdl1.html#create_rgb_surface,int,int,int,uint32,uint32,uint32,uint32	proc create_rgb_surface(width, height, depth: int; rmask, gmask, bmask, amask: uint32): SurfacePtr		483
nim	create_rgb_surface_from	dlsdl1.html#create_rgb_surface_from,pointer,int,int,int,int,uint32,uint32,uint32,uint32	proc create_rgb_surface_from(pixels: pointer; width, height: int; depth, pitch: int;\n                        rmask, gmask, bmask, amask: uint32): SurfacePtr		494
nim	display_format	dlsdl1.html#display_format,SurfacePtr	proc display_format(surface: SurfacePtr): SurfacePtr		507
nim	fill_rect	dlsdl1.html#fill_rect,SurfacePtr,uint32	proc fill_rect(dst: SurfacePtr; color: uint32): bool		517
nim	fill_rect	dlsdl1.html#fill_rect,SurfacePtr,Rect,uint32	proc fill_rect(dst: SurfacePtr; dstrect: Rect; color: uint32): bool		524
nim	flip	dlsdl1.html#flip,SurfacePtr	proc flip(surface: SurfacePtr): bool		533
nim	free	dlsdl1.html#free,SurfacePtr	proc free(surface: SurfacePtr)		540
nim	get_video_info	dlsdl1.html#get_video_info	proc get_video_info(): ptr VideoInfo		562
nim	get_video_surface	dlsdl1.html#get_video_surface	proc get_video_surface(): SurfacePtr		569
nim	list_modes	dlsdl1.html#list_modes,ptr.PixelFormat,SurfaceFlags	proc list_modes(format: ptr PixelFormat; flags: SurfaceFlags = SWSURFACE): seq[\n    tuple[w, h: int]]		577
nim	list_modes	dlsdl1.html#list_modes,SurfaceFlags	proc list_modes(flags: SurfaceFlags = SWSURFACE): seq[tuple[w, h: int]]		600
nim	load_bmp_rw	dlsdl1.html#load_bmp_rw,RWopsPtr,bool	proc load_bmp_rw(src: RWopsPtr; freesrc: bool): SurfacePtr		614
nim	lock	dlsdl1.html#lock,SurfacePtr	proc lock(surface: SurfacePtr): bool		633
nim	map_rgb	dlsdl1.html#map_rgb,ptr.PixelFormat,byte,byte,byte	proc map_rgb(format: ptr PixelFormat; r, g, b: byte): uint32		643
nim	map_rgba	dlsdl1.html#map_rgba,ptr.PixelFormat,byte,byte,byte,byte	proc map_rgba(format: ptr PixelFormat; r, g, b, a: byte): uint32		652
nim	set_alpha	dlsdl1.html#set_alpha,SurfacePtr,SurfaceFlags,byte	proc set_alpha(surface: SurfacePtr; flag: SurfaceFlags; alpha: byte): bool		663
nim	set_color_key	dlsdl1.html#set_color_key,SurfacePtr,SurfaceFlags,uint32	proc set_color_key(surface: SurfacePtr; flag: SurfaceFlags; key: uint32): bool		672
nim	set_colors	dlsdl1.html#set_colors,SurfacePtr,openArray[Color],int,int	proc set_colors(surface: SurfacePtr; colors: openArray[Color]; firstcolor: int;\n           ncolors: int): bool		679
nim	set_colors	dlsdl1.html#set_colors,SurfacePtr,ptr.UncheckedArray[Color],int,int	proc set_colors(surface: SurfacePtr; colors: ptr UncheckedArray[Color];\n           firstcolor: int; ncolors: int): bool		692
nim	set_gamma	dlsdl1.html#set_gamma,float,float,float	proc set_gamma(red, green, blue: float): bool		702
nim	set_gamma_ramp	dlsdl1.html#set_gamma_ramp,array[,uint16],array[,uint16],array[,uint16]	proc set_gamma_ramp(red, green, blue: array[256, uint16]): bool		710
nim	set_palette	dlsdl1.html#set_palette,SurfacePtr,PaletteFlags,openArray[Color],int,int	proc set_palette(surface: SurfacePtr; flags: PaletteFlags; colors: openArray[Color];\n            firstcolor: int; ncolors: int): bool		726
nim	set_palette	dlsdl1.html#set_palette,SurfacePtr,PaletteFlags,ptr.UncheckedArray[Color],int,int	proc set_palette(surface: SurfacePtr; flags: PaletteFlags;\n            colors: ptr UncheckedArray[Color]; firstcolor: int; ncolors: int): bool		741
nim	set_video_mode	dlsdl1.html#set_video_mode,int,int,int	proc set_video_mode(width, height: int; bpp: int; flags = SWSURFACE): SurfacePtr		756
nim	unlock	dlsdl1.html#unlock,SurfacePtr	proc unlock(surface: SurfacePtr)		764
nim	update_rect	dlsdl1.html#update_rect,SurfacePtr,int,int,uint,uint	proc update_rect(screen: SurfacePtr; x, y: int; w, h: uint)		770
nim	update_rects	dlsdl1.html#update_rects,SurfacePtr,openArray[Rect]	proc update_rects(screen: SurfacePtr; rects: openArray[Rect])		777
nim	update_rects	dlsdl1.html#update_rects,SurfacePtr,int,openArray[Rect]	proc update_rects(screen: SurfacePtr; numrects: int; rects: openArray[Rect])		786
nim	upper_blit	dlsdl1.html#upper_blit,SurfacePtr,SurfacePtr	proc upper_blit(src, dst: SurfacePtr): bool		796
nim	upper_blit	dlsdl1.html#upper_blit,SurfacePtr,SurfacePtr,Rect	proc upper_blit(src, dst: SurfacePtr; dstrect: Rect): bool		804
nim	upper_blit	dlsdl1.html#upper_blit,SurfacePtr,Rect,SurfacePtr,Rect	proc upper_blit(src: SurfacePtr; srcrect: Rect; dst: SurfacePtr; dstrect: Rect): bool		814
nim	video_driver_name	dlsdl1.html#video_driver_name	proc video_driver_name(): string		838
nim	video_mode_ok	dlsdl1.html#video_mode_ok,int,int,int,uint32	proc video_mode_ok(width, height, bpp: int; flags: uint32): int		847
nim	wm_get_caption	dlsdl1.html#wm_get_caption	proc wm_get_caption(): tuple[title, icon: string]		855
nim	wm_grab_input	dlsdl1.html#wm_grab_input,GrabMode	proc wm_grab_input(mode: GrabMode): GrabMode		864
nim	wm_iconify_window	dlsdl1.html#wm_iconify_window	proc wm_iconify_window(): bool		870
nim	wm_set_caption	dlsdl1.html#wm_set_caption,string,string	proc wm_set_caption(title, icon: string)		877
nim	wm_set_icon	dlsdl1.html#wm_set_icon,SurfacePtr,openArray[byte]	proc wm_set_icon(icon: SurfacePtr; mask: openArray[byte])		885
nim	wm_toggle_full_screen	dlsdl1.html#wm_toggle_full_screen,SurfacePtr	proc wm_toggle_full_screen(surface: SurfacePtr): bool		893
nim	load_wav	dlsdl1.html#load_wav,string,AudioSpec,ptr.UncheckedArray[byte],uint32	proc load_wav(file: string; spec: var AudioSpec;\n         audio_buf: var ptr UncheckedArray[byte]; audio_len: var uint32): ptr AudioSpec		908
nim	quit_requested	dlsdl1.html#quit_requested	proc quit_requested(): bool		922
nim	alloc_surface	dlsdl1.html#alloc_surface.t,SurfaceFlags,int,int,int,uint32,uint32,uint32,uint32	template alloc_surface(flags: SurfaceFlags; width, height, depth: int;\n              rmask, gmask, bmask, amask: uint32): SurfacePtr		935
nim	blit_surface	dlsdl1.html#blit_surface.t,SurfacePtr,SurfacePtr	template blit_surface(src, dst: SurfacePtr): bool		942
nim	blit_surface	dlsdl1.html#blit_surface,SurfacePtr,SurfacePtr,Rect	proc blit_surface(src, dst: SurfacePtr; dstrect: Rect): bool		949
nim	blit_surface	dlsdl1.html#blit_surface.t,SurfacePtr,Rect,SurfacePtr,Rect	template blit_surface(src: SurfacePtr; srcrect: Rect; dst: SurfacePtr; dstrect: Rect): bool		955
nim	load_bmp	dlsdl1.html#load_bmp,string	proc load_bmp(file: string): SurfacePtr		962
nimgrp	listmodes	dlsdl1.html#list_modes-procs-all	proc		577
nimgrp	peepevents	dlsdl1.html#peep_events-procs-all	proc		237
nimgrp	upperblit	dlsdl1.html#upper_blit-procs-all	proc		796
nimgrp	updaterects	dlsdl1.html#update_rects-procs-all	proc		777
nimgrp	creatergbsurface	dlsdl1.html#create_rgb_surface-procs-all	proc		471
nimgrp	fillrect	dlsdl1.html#fill_rect-procs-all	proc		517
nimgrp	setpalette	dlsdl1.html#set_palette-procs-all	proc		726
nimgrp	openaudio	dlsdl1.html#open_audio-procs-all	proc		167
nimgrp	setcolors	dlsdl1.html#set_colors-procs-all	proc		679
nimgrp	blitsurface	dlsdl1.html#blit_surface-templates-all	template		942
